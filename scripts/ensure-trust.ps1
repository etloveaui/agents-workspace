Param(
  [switch]$Verbose
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Write-Info($msg) {
  if ($Verbose) { Write-Host "[info] $msg" -ForegroundColor Cyan }
}

# Resolve repo root based on script location
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$RepoRoot = (Resolve-Path (Join-Path $ScriptDir '..')).Path
$UserHome = [Environment]::GetFolderPath('UserProfile')

Write-Info "RepoRoot: $RepoRoot"
Write-Info "UserHome: $UserHome"

# Ensure .codex/config.toml contains trusted entries for repo and user home
$CodexDir = Join-Path $RepoRoot '.codex'
$CodexConfig = Join-Path $CodexDir 'config.toml'
if (-not (Test-Path $CodexDir)) { New-Item -ItemType Directory -Path $CodexDir -Force | Out-Null }
if (-not (Test-Path $CodexConfig)) {
  "# Auto-generated by ensure-trust.ps1`napproval_policy = \"never\"`nsandbox_mode = \"workspace-write\"`n" | Out-File -FilePath $CodexConfig -Encoding utf8 -Force
  Write-Info "Created $CodexConfig"
}

function Add-CodexTrust([string]$PathToTrust) {
  $tomlKey = $PathToTrust -replace '\\', '\\\\'  # escape backslashes for TOML quoted key
  $header = "[projects.\"$tomlKey\"]"
  $content = Get-Content -Raw -Path $CodexConfig
  if ($content -notmatch [Regex]::Escape($header)) {
    "`n$header`ntrust_level = \"trusted\"`n" | Out-File -FilePath $CodexConfig -Encoding utf8 -Append
    Write-Info "Added Codex trust for: $PathToTrust"
  } else {
    Write-Info "Codex trust already present: $PathToTrust"
  }
}

Add-CodexTrust -PathToTrust $RepoRoot
Add-CodexTrust -PathToTrust $UserHome

# Ensure .gemini/trustedFolders.json contains trusted entries
$GeminiDir = Join-Path $RepoRoot '.gemini'
$TrustedJson = Join-Path $GeminiDir 'trustedFolders.json'
if (-not (Test-Path $GeminiDir)) { New-Item -ItemType Directory -Path $GeminiDir -Force | Out-Null }

$trustMap = @{}
if (Test-Path $TrustedJson) {
  try { $trustMap = Get-Content -Raw -Path $TrustedJson | ConvertFrom-Json -AsHashtable } catch { $trustMap = @{} }
}

function Ensure-Trust([string]$Path, [string]$Label) {
  if (-not $trustMap.ContainsKey($Path)) {
    $trustMap[$Path] = $Label
    Write-Info "Added Gemini trust: $Path => $Label"
  } else {
    Write-Info "Gemini trust already present: $Path"
  }
}

Ensure-Trust -Path $RepoRoot -Label 'TRUST_FOLDER'
Ensure-Trust -Path $UserHome -Label 'TRUST_PARENT'
Ensure-Trust -Path (Join-Path $RepoRoot '.claude') -Label 'TRUST_FOLDER'
Ensure-Trust -Path (Join-Path $RepoRoot '.codex') -Label 'TRUST_FOLDER'
Ensure-Trust -Path (Join-Path $RepoRoot '.gemini') -Label 'TRUST_FOLDER'

($trustMap | ConvertTo-Json -Depth 5) | Out-File -FilePath $TrustedJson -Encoding utf8 -Force
Write-Host "Trust configuration ensured for Codex and Gemini." -ForegroundColor Green

